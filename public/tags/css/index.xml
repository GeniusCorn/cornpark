<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on Corn Park</title>
    <link>https://www.nicecorn.com/tags/css/</link>
    <description>Recent content in CSS on Corn Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hant</language>
    <copyright>Corn Huang</copyright>
    <lastBuildDate>Mon, 25 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.nicecorn.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 CSS 实现三角符号</title>
      <link>https://www.nicecorn.com/posts/css/%E7%94%A8-css-%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E7%AC%A6%E5%8F%B7/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.nicecorn.com/posts/css/%E7%94%A8-css-%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E7%AC%A6%E5%8F%B7/</guid>
      <description>记忆口诀：盒子宽高皆为 0，三面边框皆透明。
div:after { position: absolute; width: 0px; height: 0px; content: &amp;#39;&amp;#39;; border-right: 100px solid transparent; border-top: 100px solid #ff0; border-left: 100px solid transparent; border-bottom: 100px solid transparent; } </description>
    </item>
    
    <item>
      <title>水平垂直居中常见方法</title>
      <link>https://www.nicecorn.com/posts/css/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.nicecorn.com/posts/css/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid>
      <description>文本垂直居中 设置 text-align: center。
元素垂直居中 利用 calc 使用 absolute 定位，已知盒子自身宽高，利用 calc 计算偏移量进行定位。
div { position: absolute; width: 200px; height: 400px; left: calc((100% - 200px) / 2); top: calc((100% - 400px) / 2); background: yellowgreen; } 利用 margin-auto 使用 absolute 定位，已知盒子自身宽高，给定四个方向的定位为 0，利用 margin 定位。
div { width: 200px; height: 400px; position: absolute; top: 0; right: 0; bottom: 0; left: 0; margin: auto; background: skyblue; } 利用 margin 负值 使用 absolute 定位，已知盒子自身宽高，给定 top 和 left 为 50%，将 margin 的对应方向的负值设为其一半来定位。</description>
    </item>
    
    <item>
      <title>伪类和伪元素</title>
      <link>https://www.nicecorn.com/posts/css/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.nicecorn.com/posts/css/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</guid>
      <description>伪类 伪类是用来添加一些选择器的特殊效果。
伪类语法 selector:pseudo-class { property: value; } 在 CSS 类中：
selector.class:pseudo-class { property: value; } anchor 伪类 可以用伪类来定义链接的不同状态。
a:link { color: #ff0000; } /* 未访问的链接 */ a:visited { color: #00ff00; } /* 已访问的链接 */ a:hover { color: #ff00ff; } /* 鼠标划过链接 */ a:active { color: #0000ff; } /* 已选中的链接 */ 注意：
a:hover 必须被置于 a:link 和 a:visited 之后才是有效的。 a:active 必须被置于 a:hover 之后才是有效的。 伪类的名称不区分大小写。 伪类结合 CSS 类 伪类可以与 CSS 类结合使用：
a.red:visited { color: #ff0000; } :first-child 伪类 :first-child 伪类用来选择父元素的第一个子元素。</description>
    </item>
    
    <item>
      <title>实现布局</title>
      <link>https://www.nicecorn.com/posts/css/%E5%AE%9E%E7%8E%B0%E5%B8%83%E5%B1%80/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.nicecorn.com/posts/css/%E5%AE%9E%E7%8E%B0%E5%B8%83%E5%B1%80/</guid>
      <description>两栏布局 现有 DOM 结构：
&amp;lt;div class=&amp;#34;outer&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;left&amp;#34;&amp;gt;left&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;right&amp;#34;&amp;gt;right&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 利用浮动实现 将左边元素宽度固定并设置为 float: left，将右边元素的 margin-left 设置为左边元素的固定宽度。右边元素的 width 默认为 auto，所以右边宽度会自动撑满父元素。
.outer { height: 100px; background-color: aqua; } .left { float: left; width: 200px; height: 100%; border-color: brown; } .right { margin-left: 200px; height: 100%; background-color: yellowgreen; } 再利用浮动实现 同样利用浮动，将左边元素宽度固定并设置为 float: left，将右边元素设置为 overflow: hidden。右边元素触发 [[面试/CSS/块格式化上下文]]，由于 BFC 的区域不会与浮动元素发生重叠，所以两侧不会重叠。
.outer { height: 100px; background-color: aqua; } .left { float: left; width: 200px; height: 100%; border-color: brown; } .</description>
    </item>
    
    <item>
      <title>组合选择符</title>
      <link>https://www.nicecorn.com/posts/css/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E7%AC%A6/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.nicecorn.com/posts/css/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E7%AC%A6/</guid>
      <description>CSS 组合选择符描述了两个选择器之间的关系。
在 CSS 中包含四种组合方式：
后代选择器，以空格 分割 子元素选择器，以大于号 &amp;gt; 分割 相邻兄弟选择器，以加号 + 分割 普通兄弟选择器，以波浪号 ~ 分割 后代选择器 后代选择器用于选取某元素的后代元素。
如选择在 &amp;lt;div&amp;gt; 中的 &amp;lt;p&amp;gt;。
div p { background-color: yellow; } 子元素选择器 子元素选择器只能选择作为某元素直接或一级子元素的元素。
如选择 &amp;lt;div&amp;gt; 中的所有直接子元素 &amp;lt;p&amp;gt;。
div &amp;gt; p { backgroud-color: yellow; } 相邻兄弟选择器 相邻兄弟选择器选择紧接在另一元素后的元素，且两者有共同父元素。
如选择所有位于 &amp;lt;div&amp;gt; 后的第一个 &amp;lt;p&amp;gt;。
div+p { background-color: yellow; &amp;#39;} 后续兄弟选择器 后续兄弟选择器选择所有指定元素后的相邻兄弟元素。
如选择所有 &amp;lt;div&amp;gt; 后的所有相邻兄弟元素 &amp;lt;p&amp;gt;。
div ~ p { background-color: yellow; } </description>
    </item>
    
    <item>
      <title>选择器的优先级</title>
      <link>https://www.nicecorn.com/posts/css/%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.nicecorn.com/posts/css/%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>浏览器通过优先级来判断哪些属性值与一个元素最为相关，从而在该元素上应用这些属性值。
选择器类型 以下的选择器类型的优先级递减：
ID 选择器（如 #example）。 类选择器（如 .example），属性选择器（如 [type=&amp;quot;redio&amp;quot;]）和伪类（如 :hover）。 类型选择器（如 h1）和伪元素（如 ::before）。 通配选择符（*）、关系选择符（+, &amp;gt;, ~, -, ||）和否定伪类（:not()）对优先级没有影响。然而，在 :not() 内部声明的选择器会影响优先级。
给元素添加的内联样式总是会覆盖外部样式表的任何样式，因此可看作是最高的优先级。
!important 例外规则 在一个样式声明中使用一个 !important 规则时，此声明将覆盖任何其他声明。使用 !important 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有级联规则，使得调试变得困难。当两条相互冲突的带有 !important 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。
注意：
一定要优先考虑使用样式规则的优先级来解决问题而不是 !important。 只有在需要覆盖全站或外部 CSS 的特定页面中使用 !important。 永远不在全站范围中的 CSS 中使用 !important。 与其使用 !important，不如：
更好地利用 CSS 级联属性。 使用更具体的规则。在选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。 当没有其他要指定的内容时，可以复制简单的选择器以增加特异性。 什么情况下使用 !important：
覆盖内联样式。 覆盖优先级高的选择器。 </description>
    </item>
    
  </channel>
</rss>
